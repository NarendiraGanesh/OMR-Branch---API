package com.omrbranch.step;

import org.junit.Assert;

import com.omrbranch.base.BaseClass;
import com.omrbranch.endpoints.Endpoints;
import com.omrbranch.globalData.GlobalData;
import com.omrbranch.payload.login.PostmanBasicAuthLogin_Output_Pojo;

import io.cucumber.java.en.*;
import io.restassured.response.Response;

public class TC001_LoginStep extends BaseClass {

	static GlobalData globalData = new GlobalData();

	@Given("User add header for login")
	public void user_add_header() {
		addHeader("accept", "application/json");
	}

	@When("User add basic authentication for login")
	public void user_add_basic_authentication_for_login() throws Exception {
		addBasicAuth(getPropertyValue("userName"), getPropertyValue("passWord"));
	}

	@When("User send {string} request for login endpoint")
	public void user_send_request_for_login_endpoint(String requestType) {
		Response response = addRequest(requestType, Endpoints.LOGIN_URL);
		globalData.setResponse(response);
	}

	@Then("User should verify the login response body firstName present as {string} and get the logtoken saved")
	public void user_should_verify_the_login_response_body_first_name_present_as_and_get_the_logtoken_saved(
			String expFirstName) {
		Response response = globalData.getResponse();
		PostmanBasicAuthLogin_Output_Pojo pojoAuthLogin_Output_Pojo = response
				.as(PostmanBasicAuthLogin_Output_Pojo.class);
		String actualFirstName = pojoAuthLogin_Output_Pojo.getData().getFirst_name();
		Assert.assertEquals("Verify first name",expFirstName, actualFirstName);

	}

}